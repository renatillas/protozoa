---
version: 1.4.1
title: Well known type definition: Field
file: ./test/new_well_known_types_test.gleam
test_name: generate_field_definition_test
---
pub type FieldKind {
  TYPE_UNKNOWN
  TYPE_DOUBLE
  TYPE_FLOAT
  TYPE_INT64
  TYPE_UINT64
  TYPE_INT32
  TYPE_FIXED64
  TYPE_FIXED32
  TYPE_BOOL
  TYPE_STRING
  TYPE_GROUP
  TYPE_MESSAGE
  TYPE_BYTES
  TYPE_UINT32
  TYPE_ENUM
  TYPE_SFIXED32
  TYPE_SFIXED64
  TYPE_SINT32
  TYPE_SINT64
}

pub type FieldCardinality {
  CARDINALITY_UNKNOWN
  CARDINALITY_OPTIONAL
  CARDINALITY_REQUIRED
  CARDINALITY_REPEATED
}

pub type Field {
  Field(
    kind: FieldKind,
    cardinality: FieldCardinality,
    number: Int,
    name: String,
    type_url: String,
    oneof_index: Int,
    packed: Bool,
    options: List(Option),
    json_name: String,
    default_value: String,
  )
}

pub fn encode_field(field: Field) -> BitArray {
  encode.message([
    encode.enum_field(1, encode_fieldkind_value(field.kind)),
    encode.enum_field(2, encode_fieldcardinality_value(field.cardinality)),
    encode.int32_field(3, field.number),
    encode.string_field(4, field.name),
    encode.string_field(6, field.type_url),
    encode.int32_field(7, field.oneof_index),
    encode.bool_field(8, field.packed),
    encode.string_field(10, field.json_name),
    encode.string_field(11, field.default_value),
  ])
}

pub fn field_decoder() -> decode.Decoder(Field) {
  use kind <- decode.then(decode.enum_field(1, decode_fieldkind_field))
  use cardinality <- decode.then(decode.enum_field(2, decode_fieldcardinality_field))
  use number <- decode.then(decode.int32_with_default(3, 0))
  use name <- decode.then(decode.string_with_default(4, ""))
  use type_url <- decode.then(decode.string_with_default(6, ""))
  use oneof_index <- decode.then(decode.int32_with_default(7, 0))
  use packed <- decode.then(decode.bool_with_default(8, False))
  use options <- decode.then(decode.repeated_field(9, fn(_) { Ok([]) }))
  use json_name <- decode.then(decode.string_with_default(10, ""))
  use default_value <- decode.then(decode.string_with_default(11, ""))
  decode.success(Field(
    kind: kind,
    cardinality: cardinality,
    number: number,
    name: name,
    type_url: type_url,
    oneof_index: oneof_index,
    packed: packed,
    options: options,
    json_name: json_name,
    default_value: default_value,
  ))
}
