---
version: 1.4.0
title: Generate message with reserved fields
file: ./test/codegen_test.gleam
test_name: generate_reserved_fields_test
---
import gloto/decode
import gloto/encode



pub type ReservedFields {
  ReservedFields(
  name: String,
  value: Int
  )
}

pub fn encode_reservedfields(reservedfields: ReservedFields) -> BitArray {
  encode.message([
    encode.string_field(1, reservedfields.name),
    encode.int32_field(3, reservedfields.value)
  ])
}

pub fn reservedfields_decoder() -> decode.Decoder(ReservedFields) {
  use name <- decode.subrecord(decode.string_with_default(1, ""))
  use value <- decode.subrecord(decode.int32_with_default(3, 0))
  decode.success(ReservedFields(name: name, value: value))
}

pub fn decode_reservedfields(data: BitArray) -> Result(ReservedFields, decode.DecodeError) {
  decode.decode(data, reservedfields_decoder())
}


