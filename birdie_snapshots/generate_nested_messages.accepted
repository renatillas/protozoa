---
version: 1.4.0
title: Generate nested messages
file: ./test/codegen_test.gleam
test_name: generate_nested_messages_test
---
import gloto/wire
import gloto/decode
import gloto/encode



pub type Outer {
  Outer(
  id: String,
  inner: Inner
  )
}

pub type Inner {
  Inner(
  value: Int
  )
}

pub fn encode_outer(outer: Outer) -> BitArray {
  encode.message([
    encode.string_field(1, outer.id),
    encode.field(2, wire.LengthDelimited, encode.length_delimited(encode_inner(outer.inner)))
  ])
}

pub fn encode_inner(inner: Inner) -> BitArray {
  encode.message([
    encode.int32_field(1, inner.value)
  ])
}

pub fn outer_decoder() -> decode.Decoder(Outer) {
  use id <- decode.subrecord(decode.string_with_default(1, ""))
  use inner <- decode.subrecord(decode.nested_message(2, inner_decoder()))
  decode.success(Outer(id: id, inner: inner))
}

pub fn decode_outer(data: BitArray) -> Result(Outer, decode.DecodeError) {
  decode.decode(data, outer_decoder())
}

pub fn inner_decoder() -> decode.Decoder(Inner) {
  use value <- decode.subrecord(decode.int32_with_default(1, 0))
  decode.success(Inner(value: value))
}

pub fn decode_inner(data: BitArray) -> Result(Inner, decode.DecodeError) {
  decode.decode(data, inner_decoder())
}


