//// Generated by Protozoa from common.proto
//// 
//// This file is auto-generated and can be safely deleted and regenerated.
//// To regenerate all proto files, run: gleam run -m protozoa
//// 
//// DO NOT EDIT THIS FILE MANUALLY - all changes will be lost on regeneration.

import gleam/int
import gleam/result
import protozoa/decode
import protozoa/encode

pub type Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

pub type Address {
  Address(
  street: String,
  city: String,
  postal_code: String,
  country: String
  )
}

pub type Timestamp {
  Timestamp(
  seconds: Int,
  nanos: Int
  )
}

pub fn encode_address(address: Address) -> BitArray {
  encode.message([
    encode.string_field(1, address.street),
    encode.string_field(2, address.city),
    encode.string_field(3, address.postal_code),
    encode.string_field(4, address.country)
  ])
}

pub fn encode_timestamp(timestamp: Timestamp) -> BitArray {
  encode.message([
    encode.int64_field(1, timestamp.seconds),
    encode.int32_field(2, timestamp.nanos)
  ])
}

pub fn address_decoder() -> decode.Decoder(Address) {
  use street <- decode.subrecord(decode.string_with_default(1, ""))
  use city <- decode.subrecord(decode.string_with_default(2, ""))
  use postal_code <- decode.subrecord(decode.string_with_default(3, ""))
  use country <- decode.subrecord(decode.string_with_default(4, ""))
  decode.success(Address(street: street, city: city, postal_code: postal_code, country: country))
}

pub fn decode_address(data: BitArray) -> Result(Address, decode.DecodeError) {
  decode.decode(data, address_decoder())
}

pub fn timestamp_decoder() -> decode.Decoder(Timestamp) {
  use seconds <- decode.subrecord(decode.int64_with_default(1, 0))
  use nanos <- decode.subrecord(decode.int32_with_default(2, 0))
  decode.success(Timestamp(seconds: seconds, nanos: nanos))
}

pub fn decode_timestamp(data: BitArray) -> Result(Timestamp, decode.DecodeError) {
  decode.decode(data, timestamp_decoder())
}

pub fn encode_priority_value(value: Priority) -> Int {
  case value {
    LOW -> 0
    MEDIUM -> 1
    HIGH -> 2
    URGENT -> 3
  }
}

pub fn decode_priority_value(value: Int) -> Result(Priority, String) {
  case value {
    0 -> Ok(LOW)
    1 -> Ok(MEDIUM)
    2 -> Ok(HIGH)
    3 -> Ok(URGENT)
    _ -> Error("Unknown enum value: " <> int.to_string(value))
  }
}

pub fn decode_priority_field(field_num: Int) -> decode.Decoder(Priority) {
  decode.field(field_num, fn(f) {
    use value <- result.try(decode.varint_field(f))
    decode_priority_value(value)
    |> result.map_error(fn(e) { decode.DecodeError(e) })
  })
}

pub fn decode_repeated_priority(field_num: Int) -> decode.Decoder(List(Priority)) {
  decode.repeated_field(field_num, fn(f) {
    use value <- result.try(decode.varint_field(f))
    decode_priority_value(value)
    |> result.map_error(fn(e) { decode.DecodeError(e) })
  })
}