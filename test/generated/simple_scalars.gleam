//// Generated by Protozoa from simple_scalars.proto
//// 
//// This file is auto-generated and can be safely deleted and regenerated.
//// To regenerate all proto files, run: gleam run -m protozoa
//// 
//// DO NOT EDIT THIS FILE MANUALLY - all changes will be lost on regeneration.

import gleam/int
import gleam/result
import protozoa/decode
import protozoa/encode
import protozoa/wire

pub type Status {
  UNKNOWN
  ACTIVE
  INACTIVE
}

pub type SimpleMessage {
  SimpleMessage(
    double_field: Float,
    float_field: Float,
    int32_field: Int,
    int64_field: Int,
    uint32_field: Int,
    uint64_field: Int,
    sint32_field: Int,
    sint64_field: Int,
    bool_field: Bool,
    string_field: String,
    bytes_field: BitArray,
  )
}

pub type StatusMessage {
  StatusMessage(status: Status)
}

pub fn encode_simplemessage(simplemessage: SimpleMessage) -> BitArray {
  encode.message([
    encode.double_field(1, simplemessage.double_field),
    encode.float_field(2, simplemessage.float_field),
    encode.int32_field(3, simplemessage.int32_field),
    encode.int64_field(4, simplemessage.int64_field),
    encode.uint32_field(5, simplemessage.uint32_field),
    encode.uint64_field(6, simplemessage.uint64_field),
    encode.sint32_field(7, simplemessage.sint32_field),
    encode.sint64_field(8, simplemessage.sint64_field),
    encode.bool_field(9, simplemessage.bool_field),
    encode.string_field(10, simplemessage.string_field),
    encode.field(
      11,
      wire.LengthDelimited,
      encode.length_delimited(simplemessage.bytes_field),
    ),
  ])
}

pub fn encode_statusmessage(statusmessage: StatusMessage) -> BitArray {
  encode.message([
    encode.int32_field(1, encode_status_value(statusmessage.status)),
  ])
}

pub fn simplemessage_decoder() -> decode.Decoder(SimpleMessage) {
  use double_field <- decode.subrecord(decode.double(1))
  use float_field <- decode.subrecord(decode.float(2))
  use int32_field <- decode.subrecord(decode.int32_with_default(3, 0))
  use int64_field <- decode.subrecord(decode.int64_with_default(4, 0))
  use uint32_field <- decode.subrecord(decode.uint32_with_default(5, 0))
  use uint64_field <- decode.subrecord(decode.uint64_with_default(6, 0))
  use sint32_field <- decode.subrecord(decode.sint32(7))
  use sint64_field <- decode.subrecord(decode.sint64(8))
  use bool_field <- decode.subrecord(decode.bool_with_default(9, False))
  use string_field <- decode.subrecord(decode.string_with_default(10, ""))
  use bytes_field <- decode.subrecord(decode.bytes(11))
  decode.success(SimpleMessage(
    double_field: double_field,
    float_field: float_field,
    int32_field: int32_field,
    int64_field: int64_field,
    uint32_field: uint32_field,
    uint64_field: uint64_field,
    sint32_field: sint32_field,
    sint64_field: sint64_field,
    bool_field: bool_field,
    string_field: string_field,
    bytes_field: bytes_field,
  ))
}

pub fn decode_simplemessage(
  data: BitArray,
) -> Result(SimpleMessage, decode.DecodeError) {
  decode.decode(data, simplemessage_decoder())
}

pub fn statusmessage_decoder() -> decode.Decoder(StatusMessage) {
  use status <- decode.subrecord(decode_status_field(1))
  decode.success(StatusMessage(status: status))
}

pub fn decode_statusmessage(
  data: BitArray,
) -> Result(StatusMessage, decode.DecodeError) {
  decode.decode(data, statusmessage_decoder())
}

pub fn encode_status_value(value: Status) -> Int {
  case value {
    UNKNOWN -> 0
    ACTIVE -> 1
    INACTIVE -> 2
  }
}

pub fn decode_status_value(value: Int) -> Result(Status, String) {
  case value {
    0 -> Ok(UNKNOWN)
    1 -> Ok(ACTIVE)
    2 -> Ok(INACTIVE)
    _ -> Error("Unknown enum value: " <> int.to_string(value))
  }
}

pub fn decode_status_field(field_num: Int) -> decode.Decoder(Status) {
  decode.field(field_num, fn(f) {
    use value <- result.try(decode.varint_field(f))
    decode_status_value(value)
    |> result.map_error(fn(e) { decode.DecodeError(e) })
  })
}

pub fn decode_repeated_status(field_num: Int) -> decode.Decoder(List(Status)) {
  decode.repeated_field(field_num, fn(f) {
    use value <- result.try(decode.varint_field(f))
    decode_status_value(value)
    |> result.map_error(fn(e) { decode.DecodeError(e) })
  })
}
