//// Generated by Protozoa from test/proto/basic_types.proto
//// 
//// This file is auto-generated and can be safely deleted and regenerated.
//// To regenerate all proto files, run: gleam run -m protozoa
//// 
//// DO NOT EDIT THIS FILE MANUALLY - all changes will be lost on regeneration.

import gleam/result
import gleam/string
import protozoa/decode
import protozoa/encode
import protozoa/wire

pub type Color {
  RED
  GREEN
  BLUE
}

pub type ScalarMessage {
  ScalarMessage(
    double_field: Float,
    float_field: Float,
    int32_field: Int,
    int64_field: Int,
    uint32_field: Int,
    uint64_field: Int,
    sint32_field: Int,
    sint64_field: Int,
    fixed32_field: Int,
    fixed64_field: Int,
    sfixed32_field: Int,
    sfixed64_field: Int,
    bool_field: Bool,
    string_field: String,
    bytes_field: BitArray,
  )
}

pub type EnumMessage {
  EnumMessage(color: Color)
}

pub fn encode_enummessage(enummessage: EnumMessage) -> BitArray {
  encode.message([
    encode.int32_field(1, encode_color_value(enummessage.color)),
  ])
}

pub fn encode_scalarmessage(scalarmessage: ScalarMessage) -> BitArray {
  encode.message([
    encode.double_field(1, scalarmessage.double_field),
    encode.float_field(2, scalarmessage.float_field),
    encode.int32_field(3, scalarmessage.int32_field),
    encode.int64_field(4, scalarmessage.int64_field),
    encode.uint32_field(5, scalarmessage.uint32_field),
    encode.uint64_field(6, scalarmessage.uint64_field),
    encode.sint32_field(7, scalarmessage.sint32_field),
    encode.sint64_field(8, scalarmessage.sint64_field),
    encode.fixed32_field(9, scalarmessage.fixed32_field),
    encode.fixed64_field(10, scalarmessage.fixed64_field),
    encode.sfixed32_field(11, scalarmessage.sfixed32_field),
    encode.sfixed64_field(12, scalarmessage.sfixed64_field),
    encode.bool_field(13, scalarmessage.bool_field),
    encode.string_field(14, scalarmessage.string_field),
    encode.field(
      15,
      wire.LengthDelimited,
      encode.length_delimited(scalarmessage.bytes_field),
    ),
  ])
}

pub fn enummessage_decoder() -> decode.Decoder(EnumMessage) {
  use color <- decode.then(decode_color_field(1))
  decode.success(EnumMessage(color: color))
}

pub fn decode_enummessage(
  data: BitArray,
) -> Result(EnumMessage, List(decode.DecodeError)) {
  decode.run(data, enummessage_decoder())
}

pub fn scalarmessage_decoder() -> decode.Decoder(ScalarMessage) {
  use double_field <- decode.then(decode.double(1))
  use float_field <- decode.then(decode.float(2))
  use int32_field <- decode.then(decode.int32_with_default(3, 0))
  use int64_field <- decode.then(decode.int64_with_default(4, 0))
  use uint32_field <- decode.then(decode.uint32_with_default(5, 0))
  use uint64_field <- decode.then(decode.uint64_with_default(6, 0))
  use sint32_field <- decode.then(decode.sint32(7))
  use sint64_field <- decode.then(decode.sint64(8))
  use fixed32_field <- decode.then(decode.fixed32(9))
  use fixed64_field <- decode.then(decode.fixed64(10))
  use sfixed32_field <- decode.then(decode.sfixed32(11))
  use sfixed64_field <- decode.then(decode.sfixed64(12))
  use bool_field <- decode.then(decode.bool_with_default(13, False))
  use string_field <- decode.then(decode.string_with_default(14, ""))
  use bytes_field <- decode.then(decode.bytes(15))
  decode.success(ScalarMessage(
    double_field: double_field,
    float_field: float_field,
    int32_field: int32_field,
    int64_field: int64_field,
    uint32_field: uint32_field,
    uint64_field: uint64_field,
    sint32_field: sint32_field,
    sint64_field: sint64_field,
    fixed32_field: fixed32_field,
    fixed64_field: fixed64_field,
    sfixed32_field: sfixed32_field,
    sfixed64_field: sfixed64_field,
    bool_field: bool_field,
    string_field: string_field,
    bytes_field: bytes_field,
  ))
}

pub fn decode_scalarmessage(
  data: BitArray,
) -> Result(ScalarMessage, List(decode.DecodeError)) {
  decode.run(data, scalarmessage_decoder())
}

pub fn encode_color_value(value: Color) -> Int {
  case value {
    RED -> 0
    GREEN -> 1
    BLUE -> 2
  }
}

pub fn decode_color_field(field_number: Int) -> decode.Decoder(Color) {
  decode.field(field_number, fn(field) {
    use value <- result.try(decode.int32_field(field))
    case value {
      0 -> Ok(RED)
      1 -> Ok(GREEN)
      2 -> Ok(BLUE)
      _ ->
        Error(
          decode.DecodeError(
            "valid color value",
            "Unknown color value: " <> string.inspect(value),
            [],
          ),
        )
    }
  })
}
