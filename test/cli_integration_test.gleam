import gleam/list
import gleam/string
import gleeunit
import shellout
import simplifile

pub fn main() -> Nil {
  gleeunit.main()
}

// Test basic CLI argument parsing
pub fn basic_cli_help_test() {
  let assert Ok(output) =
    shellout.command(
      run: "gleam",
      with: ["run", "-m", "protozoa", "--", "--help"],
      in: ".",
      opt: [],
    )

  assert string.contains(output, "Protozoa - Protocol Buffer Compiler")
  assert string.contains(output, "Recommended Usage:")
  assert string.contains(output, "Advanced Usage:")
  assert string.contains(output, "Options:")
  assert string.contains(output, "-I<path>")
}

// Test CLI compilation with existing test proto files
pub fn cli_compile_basic_proto_test() {
  // Use one of the existing test proto files
  let proto_file = "test/proto/simple_scalars.proto"
  let output_dir = "test_generated_cli"

  // Clean up any existing output
  case simplifile.delete("test_generated_cli") {
    Ok(_) -> Nil
    Error(_) -> Nil
  }
  let _ = simplifile.create_directory_all(output_dir)

  let assert Ok(output) =
    shellout.command(
      run: "gleam",
      with: ["run", "-m", "protozoa", "--", proto_file, output_dir],
      in: ".",
      opt: [],
    )
  // Should indicate successful generation
  assert string.contains(output, "Successfully generated")
  assert string.contains(output, "file(s):")

  // Check that output file was created
  let expected_file = output_dir <> "/simple_scalars.gleam"
  assert Ok(True) == simplifile.is_file(expected_file)

  // Verify generated content has expected structure
  let assert Ok(content) = simplifile.read(expected_file)
  assert string.contains(content, "Generated by Protozoa")
  assert string.contains(content, "pub type")
  assert string.contains(content, "pub fn encode_")
  assert string.contains(content, "pub fn decode_")

  // Clean up
  case simplifile.delete(output_dir) {
    Ok(_) -> Nil
    Error(_) -> Nil
  }
}

// Test CLI with import paths
pub fn cli_compile_with_imports_test() {
  let proto_file = "test/proto/imports.proto"
  let output_dir = "test_generated_cli_imports"

  // Clean up any existing output
  case simplifile.delete(output_dir) {
    Ok(_) -> Nil
    Error(_) -> Nil
  }
  let _ = simplifile.create_directory_all(output_dir)

  let assert Ok(output) =
    shellout.command(
      run: "gleam",
      with: [
        "run",
        "-m",
        "protozoa",
        "--",
        "-Itest/proto",
        proto_file,
        output_dir,
      ],
      in: ".",
      opt: [],
    )

  // Should indicate successful generation
  assert string.contains(output, "Successfully generated")

  // Check that multiple files were generated (due to imports)
  let assert Ok(files) = simplifile.read_directory(output_dir)
  assert list.length(files) >= 1
  // Should have the main file
  assert list.contains(files, "imports.gleam")

  // Clean up
  let _ = simplifile.delete(output_dir)
}

// Test error handling - non-existent file
pub fn cli_nonexistent_file_test() {
  let assert Error(_) =
    shellout.command(
      run: "gleam",
      with: ["run", "-m", "protozoa", "--", "nonexistent.proto", "output"],
      in: ".",
      opt: [],
    )
}

// Test simplified interface check command
pub fn simplified_check_command_test() {
  let assert Ok(output) =
    shellout.command(
      run: "gleam",
      with: ["run", "-m", "protozoa", "check"],
      in: ".",
      opt: [],
    )

  assert string.contains(output, "Checking proto file changes")
}

// Test output directory creation
pub fn cli_creates_output_directory_test() {
  let proto_file = "test/proto/simple_scalars.proto"
  let output_dir = "test_new_directory/nested/deep"

  // Ensure the directory doesn't exist
  case simplifile.delete("test_new_directory") {
    Ok(_) -> Nil
    Error(_) -> Nil
  }

  let assert Ok(_) =
    shellout.command(
      run: "gleam",
      with: ["run", "-m", "protozoa", "--", proto_file, output_dir],
      in: ".",
      opt: [],
    )
  // Check that the nested directory was created
  let assert Ok(True) = simplifile.is_directory(output_dir)
  // Check that file was generated in the correct location
  let expected_file = output_dir <> "/simple_scalars.gleam"
  let assert Ok(True) = simplifile.is_file(expected_file)

  // Clean up
  case simplifile.delete("test_new_directory") {
    Ok(_) -> Nil
    Error(_) -> Nil
  }
}

// Test multiple import paths
pub fn cli_multiple_import_paths_test() {
  let proto_file = "test/proto/imports.proto"
  let output_dir = "test_multi_imports"

  // Clean up any existing output
  case simplifile.delete(output_dir) {
    Ok(_) -> Nil
    Error(_) -> Nil
  }
  let _ = simplifile.create_directory_all(output_dir)

  let assert Ok(output) =
    shellout.command(
      run: "gleam",
      with: [
        "run",
        "-m",
        "protozoa",
        "--",
        "-Itest/proto",
        "-I.",
        proto_file,
        output_dir,
      ],
      in: ".",
      opt: [],
    )

  assert string.contains(output, "Successfully generated")

  // Clean up
  case simplifile.delete(output_dir) {
    Ok(_) -> Nil
    Error(_) -> Nil
  }
}

// Test that CLI preserves exit codes properly
pub fn cli_exit_codes_test() {
  // Test successful case should have exit code 0
  let assert Ok(_) =
    shellout.command(
      run: "gleam",
      with: [
        "run",
        "-m",
        "protozoa",
        "--",
        "test/proto/simple_scalars.proto",
        "temp_output",
      ],
      in: ".",
      opt: [],
    )

  // Clean up
  let _ = simplifile.delete("temp_output")

  // Test failure case should have non-zero exit code
  let assert Error(#(1, _)) =
    shellout.command(
      run: "gleam",
      with: ["run", "-m", "protozoa", "--", "nonexistent.proto"],
      in: ".",
      opt: [],
    )
}
