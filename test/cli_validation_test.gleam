import glance
import gleam/list
import gleam/string
import gleeunit
import shellout
import simplifile

pub fn main() -> Nil {
  gleeunit.main()
}

pub fn all_proto_files_compile_test() {
  let test_protos = [
    "test/proto/basic_types.proto",
    "test/proto/simple_scalars.proto",
    "test/proto/repeated_fields.proto",
    "test/proto/oneofs_only.proto",
    "test/proto/nested_types.proto",
    "test/proto/well_known.proto",
  ]
  list.each(test_protos, test_single_proto_file)
}

fn test_single_proto_file(proto_file: String) -> Nil {
  let output_dir = "test/validation_output"

  let _ = simplifile.delete(output_dir)
  let _ = simplifile.create_directory_all(output_dir)

  let assert Ok(output) =
    shellout.command(
      run: "gleam",
      with: ["run", "-m", "protozoa", proto_file, output_dir],
      in: ".",
      opt: [],
    )

  assert string.contains(output, "Successfully generated")

  let assert Ok(files) = simplifile.read_directory(output_dir)
  assert list.length(files) >= 1

  list.each(files, fn(file) {
    case string.ends_with(file, ".gleam") {
      True -> {
        let file_path = output_dir <> "/" <> file
        let assert Ok(content) = simplifile.read(file_path)
        assert string.contains(content, "Generated by Protozoa")
        assert string.contains(content, "import protozoa/")
        let assert Ok(_) = glance.module(content)
        Nil
      }
      False -> Nil
    }
  })

  Nil
}

pub fn imports_proto_compilation_test() {
  let output_dir = "test/imports_validation"

  let _ = simplifile.delete(output_dir)
  let _ = simplifile.create_directory_all(output_dir)

  let assert Ok(output) =
    shellout.command(
      run: "gleam",
      with: [
        "run",
        "-m",
        "protozoa",
        "--",
        "-Itest/proto",
        "test/proto/imports.proto",
        output_dir,
      ],
      in: ".",
      opt: [],
    )

  assert string.contains(output, "Successfully generated")

  let assert Ok(files) = simplifile.read_directory(output_dir)
  assert list.length(files) >= 1
  let _ = simplifile.delete(output_dir)
}

pub fn test_oneofs_maps_proto_compilation() {
  let output_dir = "test_oneofs_maps_validation"

  let _ = simplifile.delete(output_dir)
  let _ = simplifile.create_directory_all(output_dir)

  let assert Ok(output) =
    shellout.command(
      run: "gleam",
      with: [
        "run",
        "-m",
        "protozoa",
        "--",
        "test/proto/oneofs_maps.proto",
        output_dir,
      ],
      in: ".",
      opt: [],
    )

  assert string.contains(output, "Successfully generated")
  let assert Ok(files) = simplifile.read_directory(output_dir)
  assert list.length(files) >= 1
  let expected_file = output_dir <> "/oneofs_maps.gleam"
  let assert Ok(content) = simplifile.read(expected_file)
  assert string.contains(content, "pub type ")
    || string.contains(content, "oneof")

  let _ = simplifile.delete(output_dir)
}

pub fn test_generated_code_compiles() {
  let output_dir = "test_gleam_compilation"

  let _ = simplifile.delete(output_dir)
  let _ = simplifile.create_directory_all(output_dir)

  let assert Ok(_) =
    shellout.command(
      run: "gleam",
      with: [
        "run",
        "-m",
        "protozoa",
        "--",
        "test/proto/simple_scalars.proto",
        output_dir,
      ],
      in: ".",
      opt: [],
    )

  let assert Ok(files) = simplifile.read_directory(output_dir)
  list.each(files, fn(file) {
    case string.ends_with(file, ".gleam") {
      True -> {
        let file_path = output_dir <> "/" <> file
        let assert Ok(content) = simplifile.read(file_path)
        assert string.contains(content, "import ")
        assert string.contains(content, "pub type ")
        assert string.contains(content, "pub fn ")

        assert !string.contains(content, "syntax error")
        assert !string.contains(content, "undefined")
      }
      False -> Nil
    }
  })

  let _ = simplifile.delete(output_dir)
}

pub fn test_cli_edge_cases() {
  let empty_proto_content = "syntax = \"proto3\";\nmessage Empty {}\n"
  let temp_proto = "test_empty_temp.proto"

  let assert Ok(_) = simplifile.write(temp_proto, empty_proto_content)
  let output_dir = "test_empty_output"
  let _ = simplifile.delete(output_dir)
  let _ = simplifile.create_directory_all(output_dir)

  let assert Ok(output) =
    shellout.command(
      run: "gleam",
      with: ["run", "-m", "protozoa", "--", temp_proto, output_dir],
      in: ".",
      opt: [],
    )

  assert string.contains(output, "Successfully generated")

  let expected_file = output_dir <> "/test_empty_temp.gleam"
  let assert Ok(content) = simplifile.read(expected_file)
  assert string.contains(content, "pub type Empty")
  assert string.contains(content, "pub fn encode_empty")
  assert string.contains(content, "pub fn decode_empty")

  let _ = simplifile.delete(temp_proto)
  let _ = simplifile.delete(output_dir)
}

pub fn test_cli_output_format() {
  let output_dir = "test_output_format"
  let _ = simplifile.delete(output_dir)
  let _ = simplifile.create_directory_all(output_dir)

  let assert Ok(output) =
    shellout.command(
      run: "gleam",
      with: [
        "run",
        "-m",
        "protozoa",
        "--",
        "test/proto/simple_scalars.proto",
        output_dir,
      ],
      in: ".",
      opt: [],
    )

  assert string.contains(output, "Successfully generated")
  assert string.contains(output, "file(s):")

  assert string.contains(output, "simple_scalars.gleam")

  let _ = simplifile.delete(output_dir)
}
